#include <iostream>
#include <string>
#include <stack>
#include <algorithm>

using namespace std;

class PhoneBook {
private:
    stack<pair<string, string>> contacts; // Using a pair instead of struct

public:
    bool isValidPhoneNumber(string number) {
        if (number.length() != 10) // Check length first
            return false;

        for (char c : number) { // Check each character
            if (!isdigit(c)) // If any character is not a digit
                return false;
        }
        return true;
    }

    void addContact(string name, string number) {
        if (!name.empty() && isValidPhoneNumber(number)) {
            contacts.push(make_pair(name, number));
        } else {
            cout << "Please enter a valid 10-digit phone number." << endl;
        }
    }

    void searchContacts(string searchValue, string searchOption) {
        bool found = false;
        stack<pair<string, string>> tempStack;

        while (!contacts.empty()) {
            pair<string, string> contact = contacts.top();
            contacts.pop();

            if ((searchOption == "name" && contact.first.find(searchValue) != -1) ||
                (searchOption == "number" && contact.second.find(searchValue) != -1)) {
                cout << "Name: " << contact.first << endl;
                cout << "Number: " << contact.second << endl;
                found = true;
            }
            tempStack.push(contact);
        }

        while (!tempStack.empty()) {
            contacts.push(tempStack.top());
            tempStack.pop();
        }

        if (!found) {
            cout << "No matching contacts found." << endl;
        }
    }

    void deleteContact() {
        string contactName;
        cout << "Enter the name of the contact you want to delete: ";
        cin >> contactName;

        bool contactFound = false;
        stack<pair<string, string>> tempStack;

        while (!contacts.empty()) {
            pair<string, string> contact = contacts.top();
            contacts.pop();

            if (contact.first == contactName) {
                contactFound = true;
                cout << "This contact has been deleted successfully" << endl;
                continue; 
            }

            tempStack.push(contact);
        }

        while (!tempStack.empty()) {
            contacts.push(tempStack.top());
            tempStack.pop();
        }

        if (!contactFound) {
            cout << "Contact not found." << endl;
        }
    }

    void showPhoneBook() {
        if (contacts.empty()) {
            cout << "Phone book is empty." << endl;
        } else {
            stack<pair<string, string>> tempStack = contacts;
            int contactCount = 1;
            while (!tempStack.empty()) {
                pair<string, string> contact = tempStack.top();
                tempStack.pop();
                cout << "******************************************" << endl;
                cout << "Contact " << contactCount << ":" << endl;
                cout << "Name: " << contact.first << endl;
                cout << "Number: " << contact.second << endl;
                contactCount++;
                cout << "******************************************" << endl;
            }
        }
    }
};

int main() {
    PhoneBook phoneBook;
    while (true) {
        cout << "Phone Book App" << endl;
        cout << "1. Add Contact" << endl;
        cout << "2. Search Contacts" << endl;
        cout << "3. Delete Contact" << endl;
        cout << "4. Show Phone Book" << endl;
        cout << "5. Exit" << endl;
        cout << "Choose an option: ";
        int option;
        cin >> option;

        string name, number, searchValue, searchOption;

        switch (option) {
            case 1:
                cout << "Enter Name: ";
                cin >> name;
                cout << "Enter Number: ";
                cin >> number;
                phoneBook.addContact(name, number);
                break;

            case 2:
                cout << "Enter Search Value: ";
                cin >> searchValue;
                cout << "Search by (name/number): ";
                cin >> searchOption;
                phoneBook.searchContacts(searchValue, searchOption);
                break;

            case 3:
                phoneBook.deleteContact();
                break;

            case 4:
                phoneBook.showPhoneBook();
                break;

            case 5:
                return 0;
        }
    }
}
